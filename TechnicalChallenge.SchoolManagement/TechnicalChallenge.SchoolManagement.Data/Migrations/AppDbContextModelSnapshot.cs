// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TechnicalChallenge.SchoolManagement.Data;

#nullable disable

namespace TechnicalChallenge.SchoolManagement.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.GenderModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Gender", (string)null);
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.GradeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Grade", (string)null);
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.GroupModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Group", (string)null);
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.StudentGradeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.HasIndex("StudentId", "GradeId", "GroupId")
                        .IsUnique();

                    b.ToTable("StudentGrade", (string)null);
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.StudentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.TeacherAssignmentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.HasIndex("GroupId");

                    b.HasIndex("TeacherId", "GradeId", "GroupId")
                        .IsUnique();

                    b.ToTable("TeacherAssignment", (string)null);
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.TeacherModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("Teacher", (string)null);
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.GradeModel", b =>
                {
                    b.HasOne("TechnicalChallenge.SchoolManagement.Models.TeacherModel", "Teacher")
                        .WithMany("Grades")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.StudentGradeModel", b =>
                {
                    b.HasOne("TechnicalChallenge.SchoolManagement.Models.GradeModel", "Grade")
                        .WithMany("StudentGrades")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TechnicalChallenge.SchoolManagement.Models.GroupModel", "Group")
                        .WithMany("StudentGrades")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TechnicalChallenge.SchoolManagement.Models.StudentModel", "Student")
                        .WithOne("StudentGrade")
                        .HasForeignKey("TechnicalChallenge.SchoolManagement.Models.StudentGradeModel", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.StudentModel", b =>
                {
                    b.HasOne("TechnicalChallenge.SchoolManagement.Models.GenderModel", "Gender")
                        .WithMany("Students")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.TeacherAssignmentModel", b =>
                {
                    b.HasOne("TechnicalChallenge.SchoolManagement.Models.GradeModel", "Grade")
                        .WithMany("TeacherAssignments")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TechnicalChallenge.SchoolManagement.Models.GroupModel", "Group")
                        .WithMany("TeacherAssignments")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TechnicalChallenge.SchoolManagement.Models.TeacherModel", "Teacher")
                        .WithMany("TeacherAssignments")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("Group");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.TeacherModel", b =>
                {
                    b.HasOne("TechnicalChallenge.SchoolManagement.Models.GenderModel", "Gender")
                        .WithMany("Teachers")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.GenderModel", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.GradeModel", b =>
                {
                    b.Navigation("StudentGrades");

                    b.Navigation("TeacherAssignments");
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.GroupModel", b =>
                {
                    b.Navigation("StudentGrades");

                    b.Navigation("TeacherAssignments");
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.StudentModel", b =>
                {
                    b.Navigation("StudentGrade")
                        .IsRequired();
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.TeacherModel", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("TeacherAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TechnicalChallenge.SchoolManagement.Data;

#nullable disable

namespace TechnicalChallenge.SchoolManagement.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.GenderModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Gender", (string)null);
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.GradeGroupModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("GradeId", "GroupId")
                        .IsUnique();

                    b.ToTable("GradeGroup", (string)null);
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.GradeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Grade", (string)null);
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.GroupModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Group", (string)null);
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.StudentGradeGroupModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradeGroupId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GradeGroupId");

                    b.HasIndex("StudentId", "GradeGroupId")
                        .IsUnique();

                    b.ToTable("StudentGradeGroup", (string)null);
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.StudentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.TeacherGradeGroupClassAssignmentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradeGroupId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GradeGroupId");

                    b.HasIndex("TeacherId", "GradeGroupId")
                        .IsUnique();

                    b.ToTable("TeacherGradeGroupClassAssignment", (string)null);
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.TeacherGradeGroupOwnershipModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradeGroupId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GradeGroupId")
                        .IsUnique();

                    b.HasIndex("TeacherId")
                        .IsUnique();

                    b.HasIndex("TeacherId", "GradeGroupId")
                        .IsUnique();

                    b.ToTable("TeacherGradeGroupOwnership", (string)null);
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.TeacherModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("Teacher", (string)null);
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.GradeGroupModel", b =>
                {
                    b.HasOne("TechnicalChallenge.SchoolManagement.Models.GradeModel", "Grade")
                        .WithMany("GradeGroups")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TechnicalChallenge.SchoolManagement.Models.GroupModel", "Group")
                        .WithMany("GradeGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.StudentGradeGroupModel", b =>
                {
                    b.HasOne("TechnicalChallenge.SchoolManagement.Models.GradeGroupModel", "GradeGroup")
                        .WithMany("StudentGradeGroups")
                        .HasForeignKey("GradeGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TechnicalChallenge.SchoolManagement.Models.StudentModel", "Student")
                        .WithMany("StudentGradeGroups")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GradeGroup");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.StudentModel", b =>
                {
                    b.HasOne("TechnicalChallenge.SchoolManagement.Models.GenderModel", "Gender")
                        .WithMany("Students")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.TeacherGradeGroupClassAssignmentModel", b =>
                {
                    b.HasOne("TechnicalChallenge.SchoolManagement.Models.GradeGroupModel", "GradeGroup")
                        .WithMany("TeacherGradeGroupClassAssignments")
                        .HasForeignKey("GradeGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TechnicalChallenge.SchoolManagement.Models.TeacherModel", "Teacher")
                        .WithMany("TeacherGradeGroupClassAssignments")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GradeGroup");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.TeacherGradeGroupOwnershipModel", b =>
                {
                    b.HasOne("TechnicalChallenge.SchoolManagement.Models.GradeGroupModel", "GradeGroup")
                        .WithMany("TeacherGradeGroupOwnerships")
                        .HasForeignKey("GradeGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TechnicalChallenge.SchoolManagement.Models.TeacherModel", "Teacher")
                        .WithMany("TeacherGradeGroupOwnerships")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GradeGroup");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.TeacherModel", b =>
                {
                    b.HasOne("TechnicalChallenge.SchoolManagement.Models.GenderModel", "Gender")
                        .WithMany("Teachers")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.GenderModel", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.GradeGroupModel", b =>
                {
                    b.Navigation("StudentGradeGroups");

                    b.Navigation("TeacherGradeGroupClassAssignments");

                    b.Navigation("TeacherGradeGroupOwnerships");
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.GradeModel", b =>
                {
                    b.Navigation("GradeGroups");
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.GroupModel", b =>
                {
                    b.Navigation("GradeGroups");
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.StudentModel", b =>
                {
                    b.Navigation("StudentGradeGroups");
                });

            modelBuilder.Entity("TechnicalChallenge.SchoolManagement.Models.TeacherModel", b =>
                {
                    b.Navigation("TeacherGradeGroupClassAssignments");

                    b.Navigation("TeacherGradeGroupOwnerships");
                });
#pragma warning restore 612, 618
        }
    }
}
